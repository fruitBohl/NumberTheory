#Calculating Schurs numbers 

#%% INTRO
"""
Here we define the Schur number S(c) as the largest integer n, such that the interval [1, n]
can be partitioned into c sum-free subsets. 

Sum-free means that for all integers x,y,z (not necessarily unique) in in each subset we have
x + y != z. 

We confirm that: 
S(1) = 1
S(2) = 4
S(3) = 13
S(4) = 44
S(5) = ...

To see these results run the code with MAX_INT = S(c) + 1 or see PRELIM RESULTS tab below. 

Please note that run times for only the first four Schur numbers are quick. 

If anyone reading this has any feedback, or suggestions please feel free to contact me. 
"""
#%%INITIALISING
from gurobipy import *
import math 

#%% CONSTANTS
c = 5
MAX_INT = 130 

#%% SETS
N = list(range(c+1))[1:] #index of subsets 
I = list(range(MAX_INT + 1))[1:] #integers

#%% MODEL
m = Model("Schurs number")

#%% VARIABLES

#binary variable - 1 if integer i is in subset n, 0 otherwise. 
X = {(i, n): m.addVar(vtype = GRB.BINARY) for i in I for n in N} 


#%% CONSTRAINTS

#each integer is allocated one subset
for i in I:
    m.addConstr(quicksum(X[(i, n)] for n in N) == 1)

#sum-free constraint 
for n in N:
    for i in I[:-MAX_INT//2]:
        for j in I[i-1:-i]:
                m.addConstr(X[(i, n)] + X[(j, n)] + X[(i+j, n)] <= 2)


#%% OPTIMIZE
m.optimize()

#%% OUTPUTS

SETS = {}
for n in N:
     SETS[n] = []

sn = 0
for n in N:
    for i in I: 
        if X[i, n].x ==1:
            SETS[n].append(i)
            sn += 1

print(f"S({c}) >= {sn}")
for n in N:
     print(f"SET {n} = {SETS[n]}")

#%% PRELIM RESULTS 
"""
S(1) >= 1
SET 1 = [1]



S(2) >= 4
SET 1 = [1, 4]
SET 2 = [2, 3]

S(3) >= 13
SET 1 = [1, 4, 7, 10, 13]
SET 2 = [2, 3, 11, 12]
SET 3 = [5, 6, 8, 9]

S(4) >= 44
SET 1 = [1, 5, 8, 12, 15, 19, 26, 33, 37, 40, 44]
SET 2 = [2, 6, 7, 10, 11, 30, 34, 35, 38, 39, 43]
SET 3 = [13, 17, 18, 20, 21, 22, 23, 25, 27, 28, 32]
SET 4 = [3, 4, 9, 14, 16, 24, 29, 31, 36, 41, 42]

S(5) >= 120
SET 1 = [1, 3, 5, 9, 13, 20, 24, 36, 43, 47, 53, 57, 64, 68, 74, 78, 108, 112, 118]
SET 2 = [2, 6, 7, 10, 15, 19, 28, 37, 41, 46, 50, 55, 58, 63, 71, 76, 80, 84, 85, 88, 93, 102, 106, 111, 114, 115, 119]
SET 3 = [8, 12, 18, 22, 25, 42, 49, 52, 56, 59, 62, 65, 66, 69, 72, 75, 79, 86, 89, 99, 103, 110, 113, 120]
SET 4 = [4, 11, 14, 17, 23, 26, 32, 33, 39, 45, 48, 51, 54, 60, 61, 67, 70, 73, 82, 95, 97, 98, 104, 107, 116, 117]
SET 5 = [16, 21, 27, 29, 30, 31, 34, 35, 38, 40, 44, 77, 81, 83, 87, 90, 91, 92, 94, 96, 100, 101, 105, 109]

  
"""
